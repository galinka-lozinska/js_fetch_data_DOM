{"version":3,"sources":["scripts/main.js"],"names":["LIST_PHONES_URL","DETAILS_PHONES_URL","phonesWithDetails","request","BASE_URL","url","fetch","then","response","ok","json","setTimeout","Promise","reject","status","statusText","getPhones","getPhonesDetails","phoneId","warmMessage","message","div","document","createElement","className","textContent","body","prepend","remove","getInfoOnScreen","ul","append","forEach","phone","li","JSON","stringify","phones","all","map","push","id","details","detail","catch","error"],"mappings":";AAGA,aAEA,IAAMA,EAAkB,mEAClBC,EAAqB,oEAErBC,EAAoB,GAEpBC,EAAU,SAACC,GAAUC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,QACxBC,OAAAA,MAASF,GAAAA,OAAAA,GAAWC,OAAAA,IACxBE,KAAK,SAAAC,GACAA,GAAAA,EAASC,GACJD,OAAAA,EAASE,OAGlBC,WAAW,WACFC,OAAAA,QAAQC,OAAUL,GAAAA,OAAAA,EAASM,OAAYN,OAAAA,OAAAA,EAASO,cACtD,QAIHC,EAAY,WACTb,OAAAA,EAAQH,IAGXiB,EAAmB,SAACC,GACjBf,OAAAA,EAAQF,EAAwBiB,IAAAA,OAAAA,EAAvC,WAGIC,EAAc,SAACC,GACbC,IAAAA,EAAMC,SAASC,cAAc,OAEnCF,EAAIG,UAAY,eAChBH,EAAII,YAAcL,EAClBE,SAASI,KAAKC,QAAQN,GAEtBV,WAAW,WACTU,EAAIO,UACH,MAGCC,EAAkB,WAChBR,IAAAA,EAAMC,SAASC,cAAc,OAC7BO,EAAKR,SAASC,cAAc,MAElCF,EAAIG,UAAY,cAChBH,EAAIU,OAAOD,GAEX5B,EAAkB8B,QAAQ,SAAAC,GAClBC,IAAAA,EAAKZ,SAASC,cAAc,MAElCW,EAAGT,YAAcU,KAAKC,UAAUH,GAChCH,EAAGC,OAAOG,KAEZZ,SAASI,KAAKC,QAAQN,IAGxBL,IACGT,KAAK,SAAC8B,GACEzB,OAAAA,QAAQ0B,IAAID,EAAOE,IAAI,SAAAN,GAGrBhB,OAFPf,EAAkBsC,KAAKP,GAEhBhB,EAAiBgB,EAAMQ,SAGjClC,KAAK,SAAAmC,GACJA,EAAQV,QAAQ,SAAAW,GACdzC,EAAkB8B,QAAQ,SAAAC,GACpBA,EAAMQ,KAAOE,EAAOF,KACtBR,EAAMS,QAAUC,OAKtBd,MAEDe,MAAM,SAAAC,GAAS1B,OAAAA,EAAY0B","file":"main.fa011fe7.js","sourceRoot":"../src","sourcesContent":["/* eslint-disable prefer-promise-reject-errors */\n/* eslint-disable no-throw-literal */\n/* eslint-disable max-len */\n'use strict';\n\nconst LIST_PHONES_URL = 'https://mate-academy.github.io/phone-catalogue-static/api/phones';\nconst DETAILS_PHONES_URL = ' https://mate-academy.github.io/phone-catalogue-static/api/phones';\n\nconst phonesWithDetails = [];\n\nconst request = (BASE_URL, url = '.json') => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      setTimeout(() => {\n        return Promise.reject(`${response.status} - ${response.statusText}`);\n      }, 5000);\n    });\n};\n\nconst getPhones = () => {\n  return request(LIST_PHONES_URL);\n};\n\nconst getPhonesDetails = (phoneId) => {\n  return request(DETAILS_PHONES_URL, `/${phoneId}.json`);\n};\n\nconst warmMessage = (message) => {\n  const div = document.createElement('div');\n\n  div.className = 'message-warm';\n  div.textContent = message;\n  document.body.prepend(div);\n\n  setTimeout(() => {\n    div.remove();\n  }, 5000);\n};\n\nconst getInfoOnScreen = () => {\n  const div = document.createElement('div');\n  const ul = document.createElement('ul');\n\n  div.className = 'phones-list';\n  div.append(ul);\n\n  phonesWithDetails.forEach(phone => {\n    const li = document.createElement('li');\n\n    li.textContent = JSON.stringify(phone);\n    ul.append(li);\n  });\n  document.body.prepend(div);\n};\n\ngetPhones()\n  .then((phones) => {\n    return Promise.all(phones.map(phone => {\n      phonesWithDetails.push(phone);\n\n      return getPhonesDetails(phone.id);\n    }));\n  })\n  .then(details => {\n    details.forEach(detail => {\n      phonesWithDetails.forEach(phone => {\n        if (phone.id === detail.id) {\n          phone.details = detail;\n        }\n      });\n    });\n\n    getInfoOnScreen();\n  })\n  .catch(error => warmMessage(error));\n"]}